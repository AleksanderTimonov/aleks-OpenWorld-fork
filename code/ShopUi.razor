@using Sandbox;
@using Sandbox.UI;
@inherits PanelComponent
@namespace Kicks
@if (playerController is not null)
{
<root class="@(playerController.ShowShopUi ? "" : "hide")">
    @if (playerController?.PopupUi is not null)
    {
        <div class="header">
            SHOP
        </div>
        <div class="exitbutton" onclick=@ExitShop>EXIT</div>
        <div class="shopholder">
            @for (int i = 0; i < playerController.PopupUi.ShopItems.ItemNames.Count; i++)
            {
                var index = i;
                <div class=shopitem onclick=@( () => BuyItem(playerController.PopupUi.ShopItems.ItemNames[index]))>
                    <img class="icon" src=@playerController.PopupUi.ShopItems?.ItemTextures?[index]?.ResourcePath>
                </div>
            }
        </div>
        <div class="coins">
            <div>@playerController?.Coins</div>
			<img class="coinicon" src="@CoinIcon.ResourcePath">
        </div>
    }
</root>
}

@code
{

	public PlayerController playerController { get; set; }
	public Inventory inventory { get; set; }
	[Property] public SoundEvent BuySound { get; set; }
	[Property] public SoundEvent FailSound { get; set; }
	[Property] public SoundEvent ExitSound { get; set; }
	[Property] public Texture CoinIcon { get; set; }
	protected override void OnStart()
	{
		playerController = Scene.GetAllComponents<PlayerController>().FirstOrDefault( x => !x.IsProxy );
		inventory = Scene.GetAllComponents<Inventory>().FirstOrDefault( x => !x.IsProxy );
	}
	protected override void OnUpdate()
	{
		playerController = Scene.GetAllComponents<PlayerController>().FirstOrDefault( x => !x.IsProxy );
		inventory = Scene.GetAllComponents<Inventory>().FirstOrDefault( x => !x.IsProxy );
		if (playerController is null) return;
		if (playerController.ShowShopUi && Input.EscapePressed && !IsProxy)
		{
			ExitShop();
		}
		if (playerController is not null && playerController.PopupUi is not null)
		{

		}
	}

	public void ExitShop()
	{
		playerController.ShowShopUi = false;
		playerController.AbleToMove = true;
		playerController.PopupUi.ShowPopUp = true;
		Sound.Play( ExitSound );
		playerController.PopupUi = null;
	}

	public void BuyItem(string ItemName)
	{
		if (playerController.Coins >= playerController.PopupUi.ShopItems.ItemPrices[playerController.PopupUi.ShopItems.ItemNames.IndexOf(ItemName)])
		{
			playerController.Coins -= playerController.PopupUi.ShopItems.ItemPrices[playerController.PopupUi.ShopItems.ItemNames.IndexOf(ItemName)];
			var slot = inventory.GetNextSlot();
			var action = playerController.PopupUi.ShopItems.ShopActions[playerController.PopupUi.ShopItems.ItemNames.IndexOf(ItemName)];
			action?.Invoke(playerController, inventory);
			Sound.Play( BuySound );
		}
		else
		{
			Sound.Play( FailSound );
		}
	}

	/// <summary>
	/// the hash determines if the system should be rebuilt. If it changes, it will be rebuilt
	/// </summary>
	protected override int BuildHash() => System.HashCode.Combine( Time.Now );
}
